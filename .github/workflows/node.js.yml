name: CI/CD Pipeline with Docker

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# We need permissions for both contents (README) and packages (Docker)
permissions:
  contents: write
  packages: write

jobs:
  # --- JOBS FOR TESTING ---
  test-server:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Test Server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: server/package-lock.json
      - name: Install & Test Server
        working-directory: ./server
        run: |
          npm ci
          npm audit --audit-level=high
          npm test

  test-client:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Test Client
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: Install & Test Client
        working-directory: ./client
        run: |
          npm ci
          npm audit --audit-level=critical
          npm run test:ci

  # --- JOB TO BUILD & PUSH DOCKER IMAGES ---
  build-and-push-images:
    name: Build & Push Images
    needs: [test-server, test-client]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/server:latest
      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/client:latest
          build-args: |
            REACT_APP_API_URL=${{ secrets.RENDER_SERVER_URL }}

  # --- JOB TO DEPLOY TO RENDER ---
  deploy:
    name: Deploy to Render
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Backend Deploy
        run: curl ${{ secrets.RENDER_SERVER_DEPLOY_HOOK }}
      - name: Trigger Render Frontend Deploy
        run: curl ${{ secrets.RENDER_CLIENT_DEPLOY_HOOK }}

  # --- FINAL JOB TO UPDATE THE README ---
  update-readme:
    if: always() && !contains(github.event.head_commit.message, '[skip ci]')
    name: Update README Status
    runs-on: ubuntu-latest
    needs: [test-server, test-client, build-and-push-images, deploy]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Update README with Python
        env:
          TEST_SERVER_RESULT: ${{ needs.test-server.result }}
          TEST_CLIENT_RESULT: ${{ needs.test-client.result }}
          BUILD_IMAGES_RESULT: ${{ needs.build-and-push-images.result }}
          DEPLOY_RESULT: ${{ needs.deploy.result }}
        run: |
          python3 -c "
          import os, re
          with open('README.md', 'r') as f: content = f.read()

          # Update Test Server (C)
          if os.environ.get('TEST_SERVER_RESULT') == 'success': content = re.sub(r'class C default', 'class C success', content)
          else: content = re.sub(r'class C default', 'class C failure', content)

          # Update Test Client (D)
          if os.environ.get('TEST_CLIENT_RESULT') == 'success': content = re.sub(r'class D default', 'class D success', content)
          else: content = re.sub(r'class D default', 'class D failure', content)

          # Update Build Images (E)
          if os.environ.get('BUILD_IMAGES_RESULT') == 'success': content = re.sub(r'class E default', 'class E success', content)
          elif os.environ.get('BUILD_IMAGES_RESULT') in ['failure', 'cancelled']: content = re.sub(r'class E default', 'class E failure', content)

          # Update Deploy (F)
          if os.environ.get('DEPLOY_RESULT') == 'success': content = re.sub(r'class F default', 'class F success', content)
          elif os.environ.get('DEPLOY_RESULT') in ['failure', 'cancelled']: content = re.sub(r'class F default', 'class F failure', content)

          with open('README.md', 'w') as f: f.write(content)
          "
      - name: Commit and Push updated README
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if ! git diff --quiet README.md; then
            git add README.md
            git commit -m "docs(readme): update pipeline status flowchart [skip ci]"
            git push
          fi
